name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        # Install root dependencies
        npm install
        
        # Install frontend dependencies
        cd frontend
        npm install
        cd ..
        
        # Install backend dependencies
        cd backend
        npm install
        cd ..

    - name: Run backend tests
      run: cd backend && npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test
        JWT_SECRET: test-secret
        
    - name: Run frontend tests
      run: cd frontend && npm test

    - name: Security audit
      run: |
        cd backend && npm audit
        cd ../frontend && npm audit

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build backend
      run: docker build -t ai-consultancy-backend ./backend

    - name: Build frontend
      run: docker build -t ai-consultancy-frontend ./frontend

    # Note: In a real setup, you would push these images to a registry
    # and then trigger a deployment to Render manually or via their API
