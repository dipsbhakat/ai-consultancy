// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ContactSubmission {
  id           String   @id @default(cuid())
  name         String
  email        String
  phone        String?
  company      String?
  projectType  String?
  budget       String?
  message      String
  consent      Boolean  @default(false)
  status       String   @default("NEW") // NEW, IN_REVIEW, RESOLVED, ARCHIVED
  priority     String   @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  source       String   @default("WEBSITE") // WEBSITE, EMAIL, REFERRAL, SOCIAL_MEDIA, OTHER
  tags         String   @default("") // JSON string array
  internalNotes String?
  assignedTo   String?  // Reference to AdminUser.id
  assignedUser AdminUser? @relation("AssignedAdmin", fields: [assignedTo], references: [id])
  leadScore    LeadScore? // Relationship to lead scoring
  respondedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("contact_submissions")
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  role      String
  company   String
  photoUrl  String?
  quote     String
  rating    Int      @default(5)
  published Boolean  @default(false)
  publishAt DateTime?
  createdBy String?
  updatedBy String?
  createdByUser AdminUser? @relation("TestimonialCreatedBy", fields: [createdBy], references: [id])
  updatedByUser AdminUser? @relation("TestimonialUpdatedBy", fields: [updatedBy], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("testimonials")
}

model Service {
  id           String   @id @default(cuid())
  title        String
  description  String
  features     String   @default("") // JSON string array
  price        Float?
  currency     String   @default("USD")
  billingCycle String   @default("monthly") // monthly, yearly, one-time
  popular      Boolean  @default(false)
  published    Boolean  @default(false)
  publishAt    DateTime?
  createdBy    String?
  updatedBy    String?
  createdByUser AdminUser? @relation("ServiceCreatedBy", fields: [createdBy], references: [id])
  updatedByUser AdminUser? @relation("ServiceUpdatedBy", fields: [updatedBy], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("services")
}

model Event {
  id        String   @id @default(cuid())
  type      String   // PAGEVIEW, CTA_CLICK
  path      String?
  meta      String?  // JSON string
  createdAt DateTime @default(now())

  @@map("events")
}

// Admin User Model for Authentication and Authorization
model AdminUser {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  firstName     String
  lastName      String
  role          String   @default("VIEWER") // SUPERADMIN, EDITOR, VIEWER
  isActive      Boolean  @default(true)
  lastLoginAt   DateTime?
  loginAttempts Int      @default(0)
  lockedUntil   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  assignedContacts ContactSubmission[] @relation("AssignedAdmin")
  createdTestimonials Testimonial[] @relation("TestimonialCreatedBy")
  updatedTestimonials Testimonial[] @relation("TestimonialUpdatedBy")
  createdServices Service[] @relation("ServiceCreatedBy")
  updatedServices Service[] @relation("ServiceUpdatedBy")
  auditLogs AuditLog[]
  refreshTokens RefreshToken[]
  sessions      AdminSession[]

  @@map("admin_users")
}

model RefreshToken {
  id          String   @id @default(cuid())
  token       String   @unique
  adminId     String
  admin       AdminUser @relation(fields: [adminId], references: [id], onDelete: Cascade)
  expiresAt   DateTime
  isRevoked   Boolean  @default(false)
  deviceInfo  String?  // User agent hash
  ipAddress   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("refresh_tokens")
}

model AdminSession {
  id           String    @id @default(cuid())
  adminId      String
  admin        AdminUser @relation(fields: [adminId], references: [id], onDelete: Cascade)
  sessionToken String    @unique
  deviceInfo   String?
  ipAddress    String?
  userAgent    String?
  isActive     Boolean   @default(true)
  lastActivity DateTime  @default(now())
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("admin_sessions")
}

// Audit Log Model for Tracking All Admin Actions
model AuditLog {
  id        String    @id @default(cuid())
  action    String    // CREATE, UPDATE, DELETE, LOGIN, LOGOUT, etc.
  resource  String    // contact, testimonial, service, admin_user, etc.
  resourceId String?  // ID of the affected resource
  oldValues String?   // JSON string of previous state
  newValues String?   // JSON string of new state
  ipAddress String?
  userAgent String?
  adminId   String
  admin     AdminUser @relation(fields: [adminId], references: [id])
  createdAt DateTime  @default(now())

  @@map("audit_logs")
}

// Note: SQLite doesn't support enums, so we use string constants
// Values: NEW, IN_REVIEW, RESOLVED, ARCHIVED
// Values: LOW, MEDIUM, HIGH, URGENT  
// Values: WEBSITE, EMAIL, REFERRAL, SOCIAL_MEDIA, OTHER
// Values: SUPERADMIN, EDITOR, VIEWER
// Values: PAGEVIEW, CTA_CLICK

// Advanced Analytics Models
model AnalyticsEvent {
  id          String   @id @default(cuid())
  eventType   String   // PAGE_VIEW, FORM_INTERACTION, CONTACT_SUBMIT, etc.
  eventData   String   // JSON string with event details
  sessionId   String?  // Browser session tracking
  userId      String?  // If user is identified
  ipAddress   String?
  userAgent   String?
  referrer    String?  // Traffic source
  pageUrl     String?
  timestamp   DateTime @default(now())
  
  // Calculated fields
  leadScore   Int?     // Calculated lead score based on behavior
  conversionValue Float? // Estimated conversion value
  
  @@map("analytics_events")
  @@index([eventType, timestamp])
  @@index([sessionId, timestamp])
}

model LeadScore {
  id          String   @id @default(cuid())
  contactId   String   @unique
  contact     ContactSubmission @relation(fields: [contactId], references: [id], onDelete: Cascade)
  
  // Scoring factors
  demandScore    Int @default(0)    // Based on project type, budget
  engagementScore Int @default(0)   // Based on form interactions, time on site
  qualityScore   Int @default(0)    // Based on company, email domain
  urgencyScore   Int @default(0)    // Based on timeline indicators
  
  // Composite scores
  totalScore     Int @default(0)    // Sum of all scores
  grade          String @default("C") // A, B, C, D based on total score
  
  // Metadata
  lastCalculated DateTime @default(now())
  calculatedBy   String?  // System or admin ID
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@map("lead_scores")
}

model ConversionFunnel {
  id            String   @id @default(cuid())
  sessionId     String
  stage         String   // VISITOR, ENGAGED, LEAD, CONTACT, QUALIFIED, CONVERTED
  timestamp     DateTime @default(now())
  
  // Context
  sourceStage   String?  // Previous stage
  pageUrl       String?
  eventTrigger  String?  // What caused the stage transition
  
  // Attribution
  trafficSource String?  // organic, paid, referral, direct
  campaign      String?  // UTM campaign
  medium        String?  // UTM medium
  
  @@map("conversion_funnel")
  @@index([sessionId, timestamp])
  @@index([stage, timestamp])
}

model BusinessMetrics {
  id              String   @id @default(cuid())
  metricDate      DateTime // Date for this metric calculation
  
  // Traffic metrics
  totalVisitors   Int @default(0)
  uniqueVisitors  Int @default(0)
  pageViews       Int @default(0)
  avgSessionTime  Float @default(0) // in seconds
  bounceRate      Float @default(0) // percentage
  
  // Lead metrics
  totalContacts   Int @default(0)
  qualifiedLeads  Int @default(0)
  avgLeadScore    Float @default(0)
  conversionRate  Float @default(0) // contacts/visitors %
  
  // Business metrics
  estimatedValue  Float @default(0) // Total estimated value of leads
  topTrafficSource String?
  topLeadSource   String?
  
  createdAt       DateTime @default(now())
  
  @@map("business_metrics")
  @@unique([metricDate])
}

model CampaignTracking {
  id            String   @id @default(cuid())
  campaignName  String
  
  // UTM parameters
  utmSource     String?
  utmMedium     String?
  utmCampaign   String?
  utmTerm       String?
  utmContent    String?
  
  // Performance metrics
  clicks        Int @default(0)
  visitors      Int @default(0)
  contacts      Int @default(0)
  conversions   Int @default(0)
  
  // Cost tracking
  cost          Float @default(0)
  costPerClick  Float @default(0)
  costPerLead   Float @default(0)
  
  // Dates
  startDate     DateTime
  endDate       DateTime?
  isActive      Boolean @default(true)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("campaign_tracking")
}
